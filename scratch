#version 460
#extension GL_GOOGLE_include_directive: enable

#define WORKGROUP_SIZE 256
#define RADIX_SORT_BINS 256
#define SUBGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE) in;

layout (std430, set = 0, binding = 0) buffer elements_in {
    uint g_elements_in[];
};
layout (std430, set = 0, binding = 1) buffer payloads_in {
    uint g_payloads_in[];
};

layout (std430, set = 0, binding = 2) buffer elements_out {
    uint g_elements_out[];
};
layout (std430, set = 0, binding = 3) buffer payloads_out {
    uint g_payloads_out[];
};

layout (std430, set = 0, binding = 4) buffer histograms {
    uint g_histograms[];
};

layout (set = 0, binding = 5) uniform PushConstants {
    uint g_shift;
    uint g_num_blocks_per_workgroup;
};

struct PC {
    uint g_num_elements;
    uint g_num_workgroups;
};
layout (set = 0, binding = 6) buffer stuff {
    PC pc;
};

layout (std430, set = 1, binding = 2) buffer histograms {
    uint g_histograms[];
};

shared uint sums[RADIX_SORT_BINS];
shared uint global_offsets[RADIX_SORT_BINS];

struct BinFlags {
    uint flags[WORKGROUP_SIZE / 32];
};
shared BinFlags bin_flags[RADIX_SORT_BINS];

void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;
    uint wID = gl_WorkGroupID.x;

    uint local_histogram = 0;
    uint prefix_sum = 0;
    uint histogram_count = 0;

    if (lID < RADIX_SORT_BINS) {
        uint count = 0;
        for (uint j = 0; j < pc.g_num_workgroups; j++) {
            const uint t = g_histograms[RADIX_SORT_BINS * j + lID];
            local_histogram = (j == wID) ? count : local_histogram;
            count += t;
        }
        histogram_count = count;
        sums[lID] = histogram_count;
    }
    barrier();

    if (lID < RADIX_SORT_BINS) {
        uint sum = 0;
        for (uint i = 0; i <= lID; i++) {
            sum += sums[i];
        }
        global_offsets[lID] = sum - sums[lID] + local_histogram;
    }
    barrier();

    const uint flags_bin = lID / 32;
    const uint flags_bit = 1 << (lID % 32);

    for (uint index = 0; index < g_num_blocks_per_workgroup; index++) {
        uint elementId = wID * g_num_blocks_per_workgroup * WORKGROUP_SIZE + index * WORKGROUP_SIZE + lID;

        if (lID < RADIX_SORT_BINS) {
            for (int i = 0; i < WORKGROUP_SIZE / 32; i++) {
                bin_flags[lID].flags[i] = 0U;
            }
        }
        barrier();

        uint element_in = 0;
        uint payload_in = 0;
        uint binID = 0;
        uint binOffset = 0;
        if (elementId < pc.g_num_elements) {
            element_in = g_elements_in[elementId];
            payload_in = g_payloads_in[elementId];
            binID = uint(element_in >> g_shift) & uint(RADIX_SORT_BINS - 1);
            binOffset = global_offsets[binID];
            atomicAdd(bin_flags[binID].flags[flags_bin], flags_bit);
        }
        barrier();

        if (elementId < pc.g_num_elements) {
            uint prefix = 0;
            uint count = 0;
            for (uint i = 0; i < WORKGROUP_SIZE / 32; i++) {
                const uint bits = bin_flags[binID].flags[i];
                const uint full_count = bitCount(bits);
                const uint partial_count = bitCount(bits & (flags_bit - 1));
                prefix += (i < flags_bin) ? full_count : 0U;
                prefix += (i == flags_bin) ? partial_count : 0U;
                count += full_count;
            }
            g_elements_out[binOffset + prefix] = element_in;
            g_payloads_out[binOffset + prefix] = payload_in;
            if (prefix == count - 1) {
                atomicAdd(global_offsets[binID], count);
            }
        }
        barrier();
    }
}