#version 450

layout(local_size_x = 256, local_size_y = 1) in;

layout(set = 0, binding = 0) buffer InputBuffer {
    uint data[];
} inputBuffer;

layout(set = 0, binding = 1) buffer OutputBuffer {
    uint data[];
} outputBuffer;

layout(set = 0, binding = 2) buffer HistogramBuffer {
    uint histogram[256];
} histogramBuffer;

layout(push_constant) uniform PushConstants {
    uint elementCount;
    uint bitShift;
} pushConstants;

shared uint localHistogram[256];

void prefixSum(uint localId) {
    for (uint stride = 1; stride < 256; stride *= 2) {
        if (localId >= stride) {
            uint temp = histogramBuffer.histogram[localId - stride];
            barrier();
            histogramBuffer.histogram[localId] += temp;
        }
        barrier();
    }
}

void main() {
    uint localId = gl_LocalInvocationID.x;
    uint globalIdX = gl_GlobalInvocationID.x;
    uint globalIdY = gl_GlobalInvocationID.y;
    uint groupSize = gl_WorkGroupSize.x;

    // Initialize local histogram
    if (globalIdY == 0) {
        for (uint i = localId; i < 256; i += groupSize) {
            localHistogram[i] = 0;
        }
    }
    barrier();

    // Compute local histogram
    uint globalId = globalIdY * gl_NumWorkGroups.x * groupSize + globalIdX;
    if (globalId < pushConstants.elementCount) {
        uint value = inputBuffer.data[globalId];
        uint digit = (value >> pushConstants.bitShift) & 0xFFFF;
        atomicAdd(localHistogram[digit], 1);
    }
    barrier();

    // Update global histogram
    if (globalIdY == 0) {
        for (uint i = localId; i < 256; i += groupSize) {
            atomicAdd(histogramBuffer.histogram[i], localHistogram[i]);
        }
    }
    barrier();

    // Perform parallel prefix sum on global histogram
    if (globalIdX == 0 && globalIdY == 0 && localId < 256) {
        prefixSum(localId);
    }
    barrier();

    // Scatter elements to output buffer
    if (globalId < pushConstants.elementCount) {
        uint value = inputBuffer.data[globalId];
        uint digit = (value >> pushConstants.bitShift) & 0xFFFF;
        uint index = atomicAdd(histogramBuffer.histogram[digit], 1);
        outputBuffer.data[index] = value;
    }
}