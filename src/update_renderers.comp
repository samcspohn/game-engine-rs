 #version 450
#include "util.glsl"

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer u {
    ivec2 updates[];
};
layout(set = 0, binding = 1) buffer t {
    int transforms[];
};
layout(set = 0, binding = 2) buffer r {
    int renderers[];
};

struct VkDrawIndexedIndirectCommand {
    int    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};

layout(set = 0, binding = 3) buffer a {
    VkDrawIndexedIndirectCommand atomic[];
};


layout(set = 0, binding = 4) uniform Data {
    int num_jobs;
    int stage;
};


void main() {
    const uint id = gl_GlobalInvocationID.x;
    if(id < num_jobs) {
        switch(stage) {
            case 0:
                transforms[updates[id].x] = updates[id].y;
                break;
            case 1:
                if( transforms[id] != -1) {
                    uint r_id = atomicAdd(atomic[0].instanceCount,1);
                    renderers[r_id] = transforms[id];
                }
                break;
        }
    }
}