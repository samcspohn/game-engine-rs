#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer InputKeyBuffer {
    uint keys[];
} input_key_buffer;

layout(set = 0, binding = 1) buffer OutputKeyBuffer {
    uint keys[];
} output_key_buffer;

layout(set = 0, binding = 2) buffer InputPayloadBuffer {
    uint payloads[];
} input_payload_buffer;

layout(set = 0, binding = 3) buffer OutputPayloadBuffer {
    uint payloads[];
} output_payload_buffer;

layout(set = 0, binding = 4) buffer GlobalCountBuffer {
    uint counts[];
} global_count_buffer; // 256 * num_workgroups

layout(set = 0, binding = 5) buffer WorkGroupOffsetBuffer {
    uint offsets[];
} wg_offset_buffer;

struct PC {
    uint total_elements;
    uint num_workgroups;
};
layout(set = 0, binding = 6) buffer totalElements {
    PC pc;
};
layout(set = 0, binding = 7) uniform PushConstants {
    uint pass;
    uint stage;
} push_constants;

shared uint local_counts[256];
shared uint local_offsets[256];

void main() {
    uint global_id = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint local_id = gl_LocalInvocationID.x;
    uint group_id = gl_WorkGroupID.x + gl_WorkGroupID.y * gl_NumWorkGroups.x;

    switch (push_constants.stage) {
        case 0: // Local counting
            if (local_id < 256) {
                local_counts[local_id] = 0;
            }
            barrier();

            if (global_id < pc.total_elements) {
                uint key = input_key_buffer.keys[global_id];
                uint radix = (key >> (8 * push_constants.pass)) & 0xFF;
                atomicAdd(local_counts[radix], 1);
            }
            break;

        case 1: // Compute local offsets and update global counts
            if (local_id < 256) {
                uint sum = 0;
                for (uint i = 0; i < local_id; i++) {
                    sum += local_counts[i];
                }
                local_offsets[local_id] = sum;

                atomicAdd(global_count_buffer.counts[local_id * pc.num_workgroups + group_id], local_counts[local_id]);
            }
            break;

        case 2: // Compute global offsets
            if (group_id == 0 && local_id < 256) {
                uint global_offset = 0;
                for (uint i = 0; i < pc.num_workgroups; i++) {
                    uint wg_count = global_count_buffer.counts[local_id * pc.num_workgroups + i];
                    global_count_buffer.counts[local_id * pc.num_workgroups + i] = global_offset;
                    global_offset += wg_count;
                }
            }
            break;

        case 3: // Compute work group offset
            if (local_id == 0) {
                uint wg_offset = 0;
                for (uint i = 0; i < 256; i++) {
                    wg_offset += global_count_buffer.counts[i * pc.num_workgroups + group_id];
                }
                wg_offset_buffer.offsets[group_id] = wg_offset;
            }
            break;

        case 4: // Scatter elements
            if (global_id < pc.total_elements) {
                uint key = input_key_buffer.keys[global_id];
                uint payload = input_payload_buffer.payloads[global_id];
                uint radix = (key >> (8 * push_constants.pass)) & 0xFF;
                uint global_offset = global_count_buffer.counts[radix * push_constants.num_workgroups + group_id];
                uint local_offset = local_offsets[radix];
                uint wg_offset = wg_offset_buffer.offsets[group_id];
                uint index = global_offset + local_offset + (global_id - group_id * gl_WorkGroupSize.x - local_offset);
                output_key_buffer.keys[index] = key;
                output_payload_buffer.payloads[index] = payload;
            }
            break;
    }
}