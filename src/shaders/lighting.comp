#version 450
#include "util.glsl"

// struct ClusterNode {
//     uint count;
//     uint offset;
// };
layout(set = 0, binding = 0) uniform Data {
    int num_jobs;
    int stage;
};

// layout(set = 0, binding = 0) buffer p { vec4 to_buffer[]; };
layout(set = 0, binding = 1) buffer l { light lights[]; };
layout(set = 0, binding = 2) buffer ld { light_deinit deinits[]; };
layout(set = 0, binding = 3) buffer li { light_init inits[]; };
layout(set = 0, binding = 4) buffer tr { transform transforms[]; };
layout(set = 0, binding = 6) buffer lt { lightTemplate templates[]; };
layout(set = 0, binding = 7) buffer t { tile tiles[]; };

layout(set = 0, binding = 8) buffer ll { ivec2 light_list[]; };
layout(set = 0, binding = 9) buffer ll2 { uint light_list2[]; };
layout(set = 0, binding = 10) buffer lo { uint light_offsets[]; };
layout(set = 0, binding = 11) buffer lc { uint light_list_counter; };
layout(set = 0, binding = 12) buffer vl { uint visible_lights[]; };
layout(set = 0, binding = 13) buffer vlc { uint visible_lights_c; };
layout(set = 0, binding = 14) buffer i { DispatchIndirectCommand indirect[]; };

shared uint local_offsets[128 * 2];
shared ivec2 local_indeces[128 * 4];
// shared uint local_counts[_light_quadtree_offsets[MAX_LEVEL]];
shared uint local_counter;
shared uint global_idx;
const ivec2 index_offsets[4] = {ivec2(0), ivec2(0, 1), ivec2(1, 0), ivec2(1)};   // -1?

void traverse_quadtree(inout ivec3 a[4], inout int a_c, vec3 pos, float radius) {
    ivec3 b[4];
    int b_c = 0;
    for (int level = 2; level < MAX_LEVEL; ++level) {   // iterate through levels
        b_c = 0;
        for (int i = 0; i < a_c; i++) {
            int index = get_tile(a[i].x, a[i].y, a[i].z);
            atomicAdd(tiles[index].travel_through, 1);
        }
        for (int j = 0; j < a_c; ++j) {   // iterate through collided parents
            ivec2 tile_c = a[j].xy * 2;
            for (int k = 0; k < 4; ++k) {   // iterate through 4 quadtree children
                ivec2 _tile_c = tile_c + index_offsets[k];
                int index = get_tile(_tile_c.x, _tile_c.y, level);
                if (isCollided(pos, radius, tiles[index])) {
                    if (b_c >= 4) {
                        return;
                    }
                    b[b_c] = ivec3(_tile_c, level);
                    ++b_c;
                }
            }
        }
        a = b;
        a_c = b_c;
    }
    return;
}

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main() {
    const uint id = gl_GlobalInvocationID.x;
    if (id < num_jobs) {
        switch (stage) {
        case 0: {   // deinit
            light_deinit di = deinits[id];
            lights[di.id].enabled = 0;
        } break;
        case 1: {   // init
            light_init li = inits[id];
            lights[li.id].t_id = li.t_id;
            lights[li.id].templ = li.templ_id;
            lights[li.id].enabled = 1;
        } break;
        case 2: {

            if (lights[id].enabled == 0) break;
            vec3 pos = transforms[lights[id].t_id].position;
            vec3 color = templates[lights[id].templ].color;
            attenuation att = templates[lights[id].templ].atten;
            float lightMax = max(max(color.r, color.g), color.b) * att.brightness;
            float radius = (-att.linear + sqrt(att.linear * att.linear - 4 * att.exponential * (att.constant - 200 * lightMax))) / (2 * att.exponential);
            lights[id].pos = pos;
            lights[id].radius = radius;

        } break;
        case 6: {
            if (gl_LocalInvocationID.x == 0) {
                local_counter = 0;
            }
            barrier();
            vec3 pos = lights[id].pos;
            float radius = lights[id].radius;
            if (lights[id].enabled == 1 && isCollided(pos, radius, tiles[get_tile(0, 0, 0)])) {   // full camera frustum
                uint idx = atomicAdd(local_counter, 1);
                local_offsets[idx] = id;
            }
            barrier();
            if (gl_LocalInvocationID.x == 0) {
                global_idx = atomicAdd(visible_lights_c, local_counter);
            }
            barrier();
            if (gl_LocalInvocationID.x < local_counter) {
                visible_lights[global_idx + gl_LocalInvocationID.x] = local_offsets[gl_LocalInvocationID.x];
            }
            atomicMax(indirect[0].x, (global_idx + local_counter) / 128 + 1);
        } break;
        case 3: {
            if (gl_WorkGroupID.x > visible_lights_c / gl_WorkGroupSize.x + 1) {   // dispatch indirect
                return;
            }
            uint local_id = gl_LocalInvocationID.x;
            if (local_id == 0) {
                local_counter = 0;
            }
            barrier();
            if (id < visible_lights_c) {
                uint light_id = visible_lights[id];

                vec3 pos = lights[light_id].pos;
                float radius = lights[light_id].radius;
                ivec3 a[4];
                int a_c = 0;
                for (int x = 0; x < 4; ++x) {   // entrance, first level
                    ivec2 c = index_offsets[x];
                    if (isCollided(pos, radius, tiles[get_tile(c.x, c.y, 1)])) {   // level 1 since level 0 is full camera frustum
                        a[a_c] = ivec3(c.x, c.y, 1);
                        ++a_c;
                    }
                }
                traverse_quadtree(a, a_c, pos, radius);

                uint local_idx = atomicAdd(local_counter, a_c);
                for (int i = 0; i < a_c; ++i) {
                    ivec3 _a = a[i];
                    int tile_idx = get_tile(_a.x, _a.y, _a.z);
                    local_indeces[local_idx + i] = ivec2(tile_idx, light_id);
                    atomicAdd(tiles[tile_idx].count, 1);
                }
            }

            barrier();
            if (local_id == 0) {
                global_idx = atomicAdd(light_list_counter, local_counter);
            }
            barrier();
            local_id = local_id * 4;
            for (int i = 0; i < 4; ++i) {
                if (local_id + i < local_counter) {
                    light_list[global_idx + local_id + i] = local_indeces[local_id + i];
                }
            }
            atomicMax(indirect[0].x, (global_idx + local_counter) / 128 + 1);
        } break;
        case 4: {   // prefix sum
            const float num_tiles = _light_quadtree_offsets[MAX_LEVEL];
            const float num_threads = gl_WorkGroupSize.x;

            // if (gl_LocalInvocationID.x == 0) {
            //     uint total = tiles[0].count;
            //     tiles[0].offset = 0;
            //     light_offsets[0] = 0;
            //     for (int i = 1; i < num_tiles; ++i) {
            //         tiles[i].offset = total;
            //         light_offsets[i] = total;
            //         total += tiles[i].count;
            //     }
            // }
            // return;
            // 1364 tiles (max 32x32 tiles)
            // 1 work group = 128 threads

            uint local_id = gl_LocalInvocationID.x;
            int start = int(local_id * (num_tiles / num_threads));
            int end = int((local_id + 1) * (num_tiles / num_threads));

            uint temp = tiles[start].count;
            tiles[start].offset = 0;
            for (int i = start + 1; i < end; ++i) {
                tiles[i].offset = temp;
                temp += tiles[i].count;
            }
            local_offsets[id] = temp;
            barrier();
            if (local_id == 0) {
                uint temp = local_offsets[0];
                local_offsets[0] = 0;
                for (int i = 1; i < gl_WorkGroupSize.x; i++) {
                    uint temp2 = local_offsets[i];
                    local_offsets[i] = temp;
                    temp += temp2;
                }
            }
            barrier();

            // int _d = int(log2(128)) - 1;
            // for (int d = 1; d <= _d; d++) {
            //     if ((id + 1) % 2 << d == 0) {
            //         local_offsets[id] += local_offsets[id - 2 << (d - 1)];
            //     }
            //     barrier();
            // }
            // barrier();
            // if (id == 127) {
            //     local_offsets[id] = 0;
            // }
            // barrier();
            // for (int d = _d; d > 0; d--) {
            //     if ((id + 1) % 2 << d == 0) {
            //         uint temp = local_offsets[id];
            //         local_offsets[id - 2 << (d - 1)] = local_offsets[id];
            //         local_offsets[id] = temp + local_offsets[id - 2 << (d - 1)];
            //     }
            //     barrier();
            // }

            // int _d = int(log2(128)) - 1;
            // for (int d = 0; d <= _d; d++) {
            //     // if ((127 - id) % 2 << (d + 1) == 0) {
            //         local_offsets[id + 2 << (d + 1) - 1] = local_offsets[id + 2 << d - 1] + local_offsets[id + 2 << (d + 1) - 1];
            //     // }
            //     barrier();
            // }
            // barrier();
            // if (gl_LocalInvocationID.x == 127) {
            //     local_offsets[127] = 0;
            // }
            // barrier();
            // for (int d = _d; d >= 0; d--) {
            //     // if ((127 - id) % 2 << (d + 1) == 0) {
            //         uint temp = local_offsets[id + 2 << d - 1];
            //         local_offsets[id + 2 << d - 1] = local_offsets[id + 2 << (d + 1) - 1];
            //         local_offsets[id + 2 << (d + 1) - 1] = temp + local_offsets[id + 2 << (d + 1) - 1];
            //     // }
            //     barrier();
            // }

            // uint modulo = 2;
            // while (modulo < 128) {
            //     if ((127 - id) % modulo == 0) {
            //         local_offsets[id] += local_offsets[id - modulo >> 1];
            //     }
            //     modulo <<= 1;
            // }
            // barrier();
            // if(gl_LocalInvocationID.x == 127) {
            //     local_offsets[127] = 0;
            // }
            // barrier();
            // while(modulo > 1) {
            //     if ((127 - id) % modulo == 0) {
            //         uint temp = local_offsets[id - modulo >> 1];
            //         local_offsets[id - modulo >> 1] = local_offsets[id];
            //         local_offsets[id] += temp;
            //     }
            //     modulo >>= 1;
            // }

            // attrib: https://github.com/openglsuperbible/sb6code/blob/master/bin/media/shaders/prefixsum/prefixsum.cs.glsl
            // uint id = gl_LocalInvocationID.x;
            // uint rd_id;
            // uint wr_id;
            // uint mask;

            // const uint steps = uint(log2(gl_WorkGroupSize.x)) + 1;
            // uint step = 0;

            // barrier();

            // for (step = 0; step < steps; step++) {
            //     mask = (1 << step) - 1;
            //     rd_id = ((id >> step) << (step + 1)) + mask;
            //     wr_id = rd_id + 1 + (id & mask);

            //     local_offsets[wr_id] += local_offsets[rd_id];

            //     barrier();
            // }
            for (int i = start; i < end; ++i) {
                tiles[i].offset += local_offsets[id];
                light_offsets[i] = tiles[i].offset;
            }

        } break;
        case 5: {   // reorder
            if (id < light_list_counter) {
                uint index = atomicAdd(light_offsets[light_list[id].x], 1);
                light_list2[index] = light_list[id].y;
            }
        } break;
        default:
            break;
        }
    }
}